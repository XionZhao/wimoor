package com.wimoor.sys.gc.util;import java.math.BigDecimal;import java.math.RoundingMode;/** * BigDecimalUtil 小数处理工具类, 所有方法默认四舍五入 * * <p> * BigDecimalUtil.MONEY_POINT  小数位数默认保留2，暂不支持自定义 * BigDecimalUtil.mc      ==> 四舍五入 * BigDecimalUtil.mcDown  ==> 舍弃 ===> 直接舍弃指定位数后的小数，如：1.9 = 1 * BigDecimalUtil.mcUp    ==> 上升 ===> 舍弃指定位数后的小数,舍弃后小数的最后一位只要大于0就加1 --> 如: 1.1 = 2 * </P> *///@Slf4jpublic class BigDecimalUtil {    /**     * BigDecimal 相加     *     * @param v1 加放     * @param v2 被加方     * @return java.math.BigDecimal     * @author wangsong     * @date 2020/12/24 0024 14:49     * @version 1.0.1     */    public static BigDecimal add(BigDecimal v1, BigDecimal v2) {        if (v1 == null) {            v1 = new BigDecimal("0");        }        if (v2 == null) {            v2 = new BigDecimal("0");        }        return v1.add(v2);    }    /**     * BigDecimal 相减     *     * @param v1 减方     * @param v2 被减方     * @return java.math.BigDecimal     * @author wangsong     * @date 2020/12/24 0024 14:49     * @version 1.0.1     */    public static BigDecimal subtract(BigDecimal v1, BigDecimal v2) {        if (v1 == null) {            v1 = new BigDecimal("0");        }        if (v2 == null) {            v2 = new BigDecimal("0");        }        return v1.subtract(v2);    }    /**     * BigDecimal 相乘     *     * @param v1 乘方     * @param v2 被乘方     * @return java.math.BigDecimal     * @author wangsong     * @date 2020/12/24 0024 14:48     * @version 1.0.1     */    public static BigDecimal multiply(BigDecimal v1, BigDecimal v2) {        if (v1 == null) {            v1 = new BigDecimal("0");        }        if (v2 == null) {            v2 = new BigDecimal("0");        }        return v1.multiply(v2);    }    /**     * BigDecimal 相除     *     * @param v1 除方     * @param v2 被除方     * @return java.math.BigDecimal     * @author wangsong     * @date 2020/12/24 0024 14:48     * @version 1.0.1     */    public static BigDecimal divide(BigDecimal v1, BigDecimal v2) {        if (v1 == null) {            v1 = new BigDecimal("0");        }        if (v2 == null) {            v2 = new BigDecimal("0");        }        return v1.divide(v2, 9, RoundingMode.HALF_UP);    }    /**     * 传入值乘100(一般用于rmb单位 元 转 分)     *     * @param v1     * @return java.math.BigDecimal     * @author wangsong     * @date 2020/12/7 0007 16:19     * @version 1.0.1     */    public static BigDecimal multiply100(BigDecimal v1) {        if (v1 == null) {            v1 = new BigDecimal("0");        }        return v1.multiply(new BigDecimal("100"));    }    /**     * 传入值除100 (一般用于rmb单位 分 转 元)     *     * @param v1     * @return java.math.BigDecimal     * @author wangsong     * @date 2020/12/7 0007 16:20     * @version 1.0.1     */    public static BigDecimal divide100(BigDecimal v1) {        if (v1 == null) {            v1 = new BigDecimal("0");        }        return v1.divide(new BigDecimal("100"), 2,RoundingMode.HALF_UP);    }    /**     * 四舍五入保留两位小数 ( HALF_UP 5向上取，HALF_DOWN 5向下取)     */    public static BigDecimal parse(BigDecimal bg) {        return parse(bg, 2);    }    public static BigDecimal parse(BigDecimal bg, Integer scale) {        return bg.setScale(scale, RoundingMode.HALF_UP);    }    /**     * 上升 ===> 舍弃指定位数后的小数, （ CEILING= 天花板） ==> 舍弃后小数的最后一位只要 >0 就加1     */    public static BigDecimal parseUp(BigDecimal bg) {        return parseUp(bg, 2);    }    public static BigDecimal parseUp(BigDecimal bg, Integer scale) {        return bg.setScale(scale,RoundingMode.CEILING);      }    /**     * 舍弃 ===> 直接舍弃指定位数后的小数 （FLOOR = 地板） ==>  直接舍弃指定位数后的小数     */    public static BigDecimal parseDown(BigDecimal bg) {        return parseDown(bg, 2);    }    public static BigDecimal parseDown(BigDecimal bg, Integer scale) {        return bg.setScale(scale, RoundingMode.FLOOR);    } }